<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>migaoyang</title>
  
  <subtitle>migaoyang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-09T10:37:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>米高扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/Spring%20AOP/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/Spring AOP/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2020-09-09T10:37:15.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Spring-注解&quot;&gt;&lt;a href=&quot;#Spring-注解&quot; class=&quot;headerlink&quot; title=&quot;Spring 注解&quot;&gt;&lt;/a&gt;Spring 注解&lt;/h3&gt;&lt;h4 id=&quot;什么是基于注解的容器配置？&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/thread1/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/thread1/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2019-11-07T01:21:42.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/java内存模型/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2020-02-10T12:05:32.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Java内存模型&quot;&gt;&lt;a href=&quot;#Java内存模型&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/spring/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/spring/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2020-02-23T18:12:45.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;spring中的IoC是一种软件开发的思想，用来降低程序间耦合的问题。在未采用IoC的开发中，上层依赖下层，某个对象需要另一个对象，只能自己采用new的方式进行创建，那么会产生以下的问题： 
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/mmall_user/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/mmall_user/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2020-02-29T14:38:48.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;用户管理分为门户用户管理与后台用户管理，本篇先对门户用户管理进行总结。&lt;br&gt;要具体实现以下需求：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;li&gt;检查用户名、邮箱是否有效 
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/thread2%20%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8BBug%E7%9A%84%E6%BA%90%E5%A4%B4/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/thread2 可见性、原子性和有序性问题：并发编程Bug的源头/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2019-11-07T03:01:35.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;可见性、原子性和有序性问题：并发编程Bug的源头&quot;&gt;&lt;a href=&quot;#可见性、原子性和有序性问题：并发编程Bug的源头&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/09/06/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/thread3%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%9A%E7%9C%8BJava%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/09/06/新建文件夹/thread3 Java内存模型：看Java如何解决可见性和有序性问题/</id>
    <published>2020-09-06T11:16:24.000Z</published>
    <updated>2020-02-10T12:14:32.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;Java内存模型：看Java如何解决可见性和有序性问题&quot;&gt;&lt;a href=&quot;#Java内存模型：看Java如何解决可见性和有序性问题&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL锁--全局锁、表锁与行锁</title>
    <link href="http://yoursite.com/2020/08/26/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/MySQLLock/"/>
    <id>http://yoursite.com/2020/08/26/新建文件夹/MySQLLock/</id>
    <published>2020-08-26T12:10:33.000Z</published>
    <updated>2020-09-09T11:10:08.658Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;MySQL提供了不同等级的锁，按限制能力的划分，分为全局锁、表锁、行锁。本文会描述不同锁的应用场景与实现原理。  &lt;/p&gt;
&lt;h2 id=&quot;全局锁&quot;&gt;&lt;a href=&quot;#全局锁&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JVM类加载机制</title>
    <link href="http://yoursite.com/2019/12/29/JVM%20ClassLoader/"/>
    <id>http://yoursite.com/2019/12/29/JVM ClassLoader/</id>
    <published>2019-12-28T16:00:00.000Z</published>
    <updated>2020-09-08T11:54:44.909Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;从大的方面讲，类加载的结果是把一段字节流变换成Class结构并写方法区，在加载阶段就已经生成class结构了，所以我认为在加载阶段应该已经写入了方法区，只是被标记为未链接而暂不能使用。&lt;/li&gt;
&lt;li&gt;类的初始化只会发生一次，与new实例的初始化不是一个概念。
        
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收（中）</title>
    <link href="http://yoursite.com/2019/12/21/JVM%20GC_2/"/>
    <id>http://yoursite.com/2019/12/21/JVM GC_2/</id>
    <published>2019-12-20T16:00:00.000Z</published>
    <updated>2020-09-08T11:54:10.632Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&amp;emsp;大部分的 Java 对象只存活一小段时间，而存活下来的小部分 Java 对象则会存活很长一段时间。下图（Java 对象生命周期的直方图，红色的表示被逃逸分析优化掉的对象）是一些研究者对Java对象生命周期的动态分析的结果。 &lt;/p&gt;
&lt;p&gt;&lt;img
        
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收(上)</title>
    <link href="http://yoursite.com/2019/12/15/JVM%20GC_1/"/>
    <id>http://yoursite.com/2019/12/15/JVM GC_1/</id>
    <published>2019-12-14T16:00:00.000Z</published>
    <updated>2020-09-08T11:53:45.111Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&amp;emsp;&amp;emsp;&lt;em&gt;茨威格在为路易十六的妻子玛丽·安托瓦内特写传记时曾无比感慨 “她那时候还太年轻，不知道所有命运馈赠的礼物，早已在暗中标好了价格”。&lt;/em&gt;    
        
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>java内部类</title>
    <link href="http://yoursite.com/2019/11/20/Java%20InnerClass/"/>
    <id>http://yoursite.com/2019/11/20/Java InnerClass/</id>
    <published>2019-11-19T16:00:00.000Z</published>
    <updated>2020-09-08T11:52:26.875Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;众所周知，每一个Java类都生成一个class文件。内部类是在一个类中再定义一个类，被包含着的类就称为内部类，包含内部类的相比之下就称为外部类。内部类与外部类之间有着紧密的联系，而内部类与其它的类关系不大。这也是内部类的一个优点：被完全隐藏起来，有着更好的封装性（可以声明为
        
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java泛型</title>
    <link href="http://yoursite.com/2019/10/22/Java%20Generic/"/>
    <id>http://yoursite.com/2019/10/22/Java Generic/</id>
    <published>2019-10-21T16:00:00.000Z</published>
    <updated>2020-09-08T11:51:54.343Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;泛型来源&quot;&gt;&lt;a href=&quot;#泛型来源&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java源码-剖析LinkedList</title>
    <link href="http://yoursite.com/2019/10/20/Java%20LinkedList/"/>
    <id>http://yoursite.com/2019/10/20/Java LinkedList/</id>
    <published>2019-10-19T16:00:00.000Z</published>
    <updated>2020-09-08T11:53:12.794Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;ArrayLis通过索引值随机访问的效率很高，但是插入与删除的性能比较低；LinkedList也实现了List接口，而LIst接口扩展了Collection接口，Collection接口又扩展了Iterable接口。同时LinkedList还实现了队列接口Queue，就是平
        
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="java源码" scheme="http://yoursite.com/tags/java%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java为何没有引用传递？</title>
    <link href="http://yoursite.com/2019/09/07/Java%20CallByValueReference/"/>
    <id>http://yoursite.com/2019/09/07/Java CallByValueReference/</id>
    <published>2019-09-06T16:00:00.000Z</published>
    <updated>2020-09-08T11:52:02.105Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;值传递（值调用）（call by value）是指在调用函数式将实际参数&lt;strong&gt;复制&lt;/strong&gt;一份传递到函数中,这样在函数中如果对参数进行修改，将不会影响到实际参数。&lt;br&gt;  引用传递（引用调用）（pass by
        
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java源码-剖析HashMap</title>
    <link href="http://yoursite.com/2019/08/16/Java%20HashMap/"/>
    <id>http://yoursite.com/2019/08/16/Java HashMap/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2020-09-08T11:49:55.583Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;ArrayList与LinkedList的缺点就是按元素内容查找值时，查找元素的时间复杂度都较高，而HashMap查找元素的时间复杂度可以达到O(1)!&lt;br&gt;Map在这里是映射的关系，K-V之间相互映射，计算K的hashCode值，根据这个值去计算（取模
        
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="java源码" scheme="http://yoursite.com/tags/java%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务</title>
    <link href="http://yoursite.com/2019/07/15/Java%20Web%20%20Transaction/"/>
    <id>http://yoursite.com/2019/07/15/Java Web  Transaction/</id>
    <published>2019-07-14T16:00:00.000Z</published>
    <updated>2020-09-08T11:49:20.631Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="JDBC" scheme="http://yoursite.com/categories/JDBC/"/>
    
    
      <category term="java高级" scheme="http://yoursite.com/tags/java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Servlet（二）</title>
    <link href="http://yoursite.com/2019/06/29/Java%20Web%20%20Servlet2/"/>
    <id>http://yoursite.com/2019/06/29/Java Web  Servlet2/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2020-09-08T11:48:58.602Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;提要：Servlet配置路径、ServletConfig、ServletContext、&lt;/p&gt;
&lt;h3 id=&quot;1-Servlet配置路径（xml或者注解）&quot;&gt;&lt;a href=&quot;#1-Servlet配置路径（xml或者注解）&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet（一）</title>
    <link href="http://yoursite.com/2019/06/16/Java%20Web%20%20Servlet1/"/>
    <id>http://yoursite.com/2019/06/16/Java Web  Servlet1/</id>
    <published>2019-06-15T16:00:00.000Z</published>
    <updated>2020-09-08T11:48:36.126Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;提要：Servlet执行过程、执行周期。  &lt;/p&gt;
&lt;p&gt;在java中，JVM是java程序唯一认识的“操作系统”，其可执行文件为 &lt;strong&gt;.class&lt;/strong&gt;
        
      
    
    </summary>
    
      <category term="Servlet" scheme="http://yoursite.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>常用排序算法的java实现</title>
    <link href="http://yoursite.com/2019/06/01/Java%20Sort/"/>
    <id>http://yoursite.com/2019/06/01/Java Sort/</id>
    <published>2019-05-31T16:00:00.000Z</published>
    <updated>2020-09-08T11:48:13.601Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;BubbleSort&quot;&gt;&lt;a href=&quot;#BubbleSort&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Sort" scheme="http://yoursite.com/categories/Sort/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
